diff -u nethack-3.4.3-orig/src/allmain.c nethack-3.4.3/src/allmain.c
--- nethack-3.4.3-orig/src/allmain.c	2003-12-07 15:39:13.000000000 -0800
+++ nethack-3.4.3/src/allmain.c	2011-04-11 20:36:20.000000000 -0700
@@ -477,6 +477,101 @@
 }
 
 void
+read_situation()
+{
+    FILE *fp;
+    char *fn = getenv("NHSITUATIONFILE");
+    struct obj *otmp;
+    int a[10];
+    int i;
+    coord c1, c2;
+
+    if (!fn) return;
+    if (!(fp = fopen(fn, "r"))) {
+        pline("Cannot open situation.");
+        return;
+    }
+
+    char lbuf[128];
+    wizard = TRUE;
+
+    while (fgets(lbuf, 127, fp)) {
+        if (lbuf[0] == '#') continue;
+        else if (!strncmp(lbuf, "stats ", 6)) {
+            sscanf(lbuf, "stats %d %d %d %d %d %d", &a[A_STR], &a[A_DEX],
+                    &a[A_CON], &a[A_INT], &a[A_WIS], &a[A_CHA]);
+            for (i = 0; i < 6; i++)
+                ABASE(i) = AMAX(i) = a[i];
+            // TODO: stats max, temp setting
+        } else if (!strcmp(lbuf, "inventory\n")) {
+            while (fgets(lbuf, 127, fp)) {
+                if (!strncmp(lbuf, ".\n", 2)) break;
+                lbuf[strlen(lbuf)-1] = 0;
+                otmp = readobjnam(lbuf, (struct obj *)0, FALSE);
+                if (otmp && otmp != &zeroobj)
+                    addinv(otmp);
+            }
+        } else if (!strcmp(lbuf, "map\n")) {
+            extern void clear_level_structures();
+            clear_level_structures();
+        } else if (!strncmp(lbuf, "at ", 3)) {
+            sscanf(lbuf, "at %d %d", &a[0], &a[1]);
+            u.ux = a[0]; u.uy = a[1];
+        } else if (!strncmp(lbuf, "room ", 5)) {
+            sscanf(lbuf, "room %d %d %d %d %d %d %d %d",
+                    &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7]);
+            create_room(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
+        } else if (!strncmp(lbuf, "corr ", 5)) {
+            sscanf(lbuf, "corr %d %d %d %d %d %d %d",
+                    &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6]);
+            c1.x = a[0]; c1.y = a[1]; c2.x = a[2]; c2.y = a[3];
+            dig_corridor(&c1, &c2, a[4], a[5], a[6]);
+        } else if (!strncmp(lbuf, "altar ", 6)) {
+            sscanf(lbuf, "altar %d %d %d", &a[0], &a[1], &a[2]);
+            levl[a[0]][a[1]].typ = ALTAR;
+            levl[a[0]][a[1]].altarmask = Align2amask( a[2] );
+        } else if (!strncmp(lbuf, "obj ", 4)) {
+            lbuf[strlen(lbuf)-1] = 0;
+            sscanf(lbuf, "obj %d %d %n", &a[0], &a[1], &i);
+            otmp = readobjnam(lbuf+i, (struct obj *)0, FALSE);
+            if (!otmp || otmp == &zeroobj)
+                pline("Invalid object %s", lbuf);
+            else
+                place_object(otmp, a[0], a[1]);
+        } else if (!strcmp(lbuf, "vault\n")) {
+            extern xchar vault_x, vault_y;
+            extern void makevtele();
+            create_room(-1, -1, 2, 2, -1, -1, VAULT, TRUE);
+            vault_x = rooms[nroom].lx;
+            vault_y = rooms[nroom].ly;
+            rooms[nroom].hx = -1;
+            add_room(vault_x, vault_y, vault_x+1,
+                    vault_y+1, TRUE, VAULT, FALSE);
+            level.flags.has_vault = 1;
+            fill_room(&rooms[nroom - 1], FALSE);
+            makevtele();
+        } else if (!strcmp(lbuf, "endmap\n")) {
+            extern void set_wall_state();
+            struct mkroom *croom;
+            if (!level.flags.is_maze_lev) {
+                for (croom = &rooms[0]; croom != &rooms[nroom]; croom++)
+                    topologize(croom);
+            }
+            set_wall_state();
+        } else {
+            pline("Unknown situation record %s", lbuf);
+            fclose(fp);
+            return;
+        }
+    }
+
+    flags.botl = 1;
+    wizard = FALSE;
+
+    fclose(fp);
+}
+
+void
 newgame()
 {
 	int i;
@@ -514,6 +609,7 @@
 
 	mklev();
 	u_on_upstairs();
+	read_situation();
 	vision_reset();		/* set up internals for level (after mklev) */
 	check_special_room(FALSE);
 
diff -u nethack-3.4.3-orig/src/Makefile nethack-3.4.3/src/Makefile
--- nethack-3.4.3-orig/src/Makefile	2011-04-11 11:00:17.000000000 -0700
+++ nethack-3.4.3/src/Makefile	2011-04-11 11:22:45.000000000 -0700
@@ -230,8 +230,8 @@
 # WINTTYLIB = -ltermcap
 # WINTTYLIB = -lcurses
 # WINTTYLIB = -lcurses16
-# WINTTYLIB = -lncurses
-WINTTYLIB = -ltermlib
+WINTTYLIB = -lncurses
+# WINTTYLIB = -ltermlib
 #
 # libraries for X11
 # If USE_XPM is defined in config.h, you will also need -lXpm here.
diff -u -x '*.o' nethack-3.4.3-orig/src/mklev.c nethack-3.4.3/src/mklev.c
--- nethack-3.4.3-orig/src/mklev.c	2003-12-07 15:39:13.000000000 -0800
+++ nethack-3.4.3/src/mklev.c	2011-04-11 19:38:57.000000000 -0700
@@ -17,6 +17,13 @@
 /* croom->lx etc are schar (width <= int), so % arith ensures that */
 /* conversion of result to int is reasonable */
 
+#undef STATIC_DCL
+#undef STATIC_OVL
+#undef STATIC_PTR
+
+#define STATIC_PTR
+#define STATIC_OVL
+#define STATIC_DCL
 
 STATIC_DCL void FDECL(mkfount,(int,struct mkroom *));
 #ifdef SINKS
@@ -49,7 +56,7 @@
 #define create_vault()	create_room(-1, -1, 2, 2, -1, -1, VAULT, TRUE)
 #define init_vault()	vault_x = -1
 #define do_vault()	(vault_x != -1)
-static xchar		vault_x, vault_y;
+xchar		vault_x, vault_y;
 boolean goldseen;
 static boolean made_branch;	/* used only during level creation */
 
@@ -1373,7 +1380,7 @@
 	levl[m.x][m.y].altarmask = Align2amask( al );
 }
 
-static void
+STATIC_OVL void
 mkgrave(croom)
 struct mkroom *croom;
 {
